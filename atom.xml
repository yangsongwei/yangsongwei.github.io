<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>monty12|博客</title>
  
  <subtitle>菜鸡一枚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangsongwei.github.io/"/>
  <updated>2019-07-01T04:15:43.769Z</updated>
  <id>https://yangsongwei.github.io/</id>
  
  <author>
    <name>yangsongwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>未选择的路</title>
    <link href="https://yangsongwei.github.io/%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF.html"/>
    <id>https://yangsongwei.github.io/未选择的路.html</id>
    <published>2019-07-01T04:03:00.000Z</published>
    <updated>2019-07-01T04:15:43.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="未选择的路"><a href="#未选择的路" class="headerlink" title="未选择的路"></a>未选择的路</h1><p>​                                        弗罗斯特（美）    </p><a id="more"></a>        <p>黄色的树林里分出两条路</p><p>可惜我不能同时去涉足</p><p>我在那路口久久伫立</p><p>我向着一条路极目望去</p><p>直到它消失在丛林深处</p><p>但我选了另外一条路</p><p>它荒草萋萋，十分幽寂</p><p>显得更诱人，更美丽</p><p>虽然在这条小路上</p><p>很少留下旅人的足迹</p><p>那天清晨落叶满地</p><p>两条路都未经脚印污染</p><p>啊，留下一条路等改日再见</p><p>但我知道路径延绵无尽头</p><p>恐怕我难以再回返</p><p>也许多少年后在某个地方</p><p>我将轻声叹息将往事回顾</p><p>一条树林里分出两条路——</p><p>而我选择了人际更少的一条</p><p>从此决定了我一生的道路</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;未选择的路&quot;&gt;&lt;a href=&quot;#未选择的路&quot; class=&quot;headerlink&quot; title=&quot;未选择的路&quot;&gt;&lt;/a&gt;未选择的路&lt;/h1&gt;&lt;p&gt;​                                        弗罗斯特（美）    &lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://yangsongwei.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="诗歌" scheme="https://yangsongwei.github.io/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>前端之css基础知识</title>
    <link href="https://yangsongwei.github.io/%E5%89%8D%E7%AB%AF%E4%B9%8Bcss%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
    <id>https://yangsongwei.github.io/前端之css基础知识.html</id>
    <published>2019-06-27T14:04:37.000Z</published>
    <updated>2019-06-30T13:08:23.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    前端中css基础知识总结。参考书籍《HTML&amp;CSS设计与构建网站》</p><a id="more"></a><h1 id="css原理"><a href="#css原理" class="headerlink" title="css原理"></a>css原理</h1><p>​    理解css的关键在于<strong>要看到网页中的任何元素周围都有一个看不见的盒子，css允许你创建规则，来操纵每个盒子以及盒子中的内容的显示方式。</strong></p><p>​    css采用将样式规则与html元素相关联的方式来操纵元素。一条css规则包含两个部分：一个选择器和一条声明。</p><p>​    </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="css基础知识"><a href="#css基础知识" class="headerlink" title="css基础知识"></a>css基础知识</h1><h2 id="一、使用css："><a href="#一、使用css：" class="headerlink" title="一、使用css："></a>一、使用css：</h2><h3 id="1、外部引入"><a href="#1、外部引入" class="headerlink" title="1、外部引入"></a>1、外部引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css路径"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    若需要引入多个css文件，则需要使用多个link标签进行引入。</p><h3 id="2、内部引入"><a href="#2、内部引入" class="headerlink" title="2、内部引入"></a>2、内部引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"test/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--css code--&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、css颜色"><a href="#二、css颜色" class="headerlink" title="二、css颜色"></a>二、css颜色</h2><p>​    1、css3透明度：</p><p>​        </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0</span>~<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    rgba(,,,0~1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、文本"><a href="#三、文本" class="headerlink" title="三、文本"></a>三、文本</h2><h3 id="1、字体术语"><a href="#1、字体术语" class="headerlink" title="1、字体术语"></a>1、字体术语</h3><p>​            (1)衬线字体：在主要的笔画的末端有一些额外的装饰，这些装饰被称为衬线。通常用于长篇文本。</p><p>​            (2)无衬线字体：用于文本非常小。</p><p>​            (3)等宽字体：每个字母的宽度都相同。</p><h3 id="2、字体选用"><a href="#2、字体选用" class="headerlink" title="2、字体选用"></a>2、字体选用</h3><p>​        </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//字体样式</span><br><span class="line"><span class="selector-tag">font-family</span>:  ;</span><br><span class="line">//字体大小</span><br><span class="line"><span class="selector-tag">font-size</span>:  ;</span><br></pre></td></tr></table></figure><h3 id="3、字体格式"><a href="#3、字体格式" class="headerlink" title="3、字体格式"></a>3、字体格式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//文字对齐方式</span><br><span class="line">text-align:left/center/right/justify(两端对齐)</span><br></pre></td></tr></table></figure><h3 id="4、链接样式："><a href="#4、链接样式：" class="headerlink" title="4、链接样式："></a>4、链接样式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:link&#123;</span><br><span class="line">    //为尚未访问过的链接设置样式</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:visited&#123;</span><br><span class="line">    //为已经访问过的链接设置样式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">：hover&#123;</span><br><span class="line">    //鼠标悬停在某个地方时的显示样式</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:active&#123;</span><br><span class="line">    //当动作生效时，产生的效果</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:focus&#123;</span><br><span class="line">    //在元素拥有焦点时产生效果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、盒子模型"><a href="#四、盒子模型" class="headerlink" title="四、盒子模型"></a>四、盒子模型</h2><h3 id="一、盒子的大小"><a href="#一、盒子的大小" class="headerlink" title="一、盒子的大小"></a>一、盒子的大小</h3><p>​        </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//宽度</span><br><span class="line"><span class="selector-tag">width</span>: ;</span><br><span class="line">//高度</span><br><span class="line"><span class="selector-tag">height</span>: ;</span><br><span class="line"></span><br><span class="line">//盒子的最大宽度</span><br><span class="line"><span class="selector-tag">max-width</span>: ;</span><br><span class="line">//盒子的最小宽度</span><br><span class="line"><span class="selector-tag">min-width</span>: ;</span><br><span class="line"></span><br><span class="line">//最大高度</span><br><span class="line"><span class="selector-tag">max-height</span>: ;</span><br><span class="line">//最小高度</span><br><span class="line"><span class="selector-tag">min-height</span>: ;</span><br></pre></td></tr></table></figure><h3 id="二、内容溢出"><a href="#二、内容溢出" class="headerlink" title="二、内容溢出"></a>二、内容溢出</h3><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden/scroll</span><br></pre></td></tr></table></figure><h3 id="三、边框、外边距、内边距"><a href="#三、边框、外边距、内边距" class="headerlink" title="三、边框、外边距、内边距"></a>三、边框、外边距、内边距</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;​    前端中css基础知识总结。参考书籍《HTML&amp;amp;CSS设计与构建网站》&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yangsongwei.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css基础知识" scheme="https://yangsongwei.github.io/tags/css%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之remove element</title>
    <link href="https://yangsongwei.github.io/leetcode%E4%B9%8Bremove-element.html"/>
    <id>https://yangsongwei.github.io/leetcode之remove-element.html</id>
    <published>2019-06-24T09:55:46.000Z</published>
    <updated>2019-06-27T13:52:34.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除元素（remove-element）"><a href="#删除元素（remove-element）" class="headerlink" title="删除元素（remove element）"></a>删除元素（remove element）</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>​    给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;删除元素（remove-element）&quot;&gt;&lt;a href=&quot;#删除元素（remove-element）&quot; class=&quot;headerlink&quot; title=&quot;删除元素（remove element）&quot;&gt;&lt;/a&gt;删除元素（remove element）&lt;/h1&gt;&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;​    给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。&lt;/p&gt;
&lt;p&gt;元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://yangsongwei.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="https://yangsongwei.github.io/tags/array/"/>
    
      <category term="leetcode" scheme="https://yangsongwei.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>HTML总结</title>
    <link href="https://yangsongwei.github.io/HTML%E6%80%BB%E7%BB%93.html"/>
    <id>https://yangsongwei.github.io/HTML总结.html</id>
    <published>2019-06-18T13:19:47.000Z</published>
    <updated>2019-06-28T11:17:16.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html标签总结"><a href="#html标签总结" class="headerlink" title="html标签总结"></a>html标签总结</h1><a id="more"></a><div class="table-container"><table><thead><tr><th>标签名</th><th>用法</th><th>属性</th><th>效果</th></tr></thead><tbody><tr><td>html</td><td><html></html></td><td></td><td>网页总标签</td></tr><tr><td>br</td><td><br></td><td></td><td>换行</td></tr><tr><td>hr</td><td><hr></td><td></td><td>画出水平分割线</td></tr><tr><td>em</td><td><em></em></td><td></td><td>起强调作用</td></tr><tr><td>blockquote</td><td><blockquote></blockquote></td><td></td><td>表明内容是引用</td></tr><tr><td>strong</td><td><strong></strong></td><td></td><td>内容显示为粗体</td></tr><tr><td>ol</td><td><ol></ol></td><td></td><td>创建有序列表</td></tr><tr><td>ul</td><td><ul></ul></td><td></td><td>创建无序列表</td></tr><tr><td>li</td><td><li></li></td><td></td><td>用于创建列表中的具体的项</td></tr><tr><td>a</td><td><a></a></td><td>href  mailto:email  target:_blank</td><td>网页链接到别的界面，href表示链接的网址。</td></tr><tr><td>img</td><td><img></td><td>src=””                    alt=””    当图片无法显示时显示文字                      title=””   鼠标点击图片时显示</td><td>插入图片</td></tr><tr><td>figcaption</td><td><figcaption>    </figcaption></td><td></td><td></td></tr><tr><td>figure</td><td><figure></figure></td><td></td><td>hhtml5中可以对图形进行描述</td></tr></tbody></table></div><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>1、实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">40</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>30</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、属性标签：</p><p>​    </p><div class="table-container"><table><thead><tr><th>属性</th><th>效果</th></tr></thead><tbody><tr><td>colspan</td><td>跨多少列</td></tr><tr><td>rowspan</td><td>跨多少行</td></tr></tbody></table></div><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>1、实例：</p><p>​    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"sub.php"</span> <span class="attr">method</span>=<span class="string">"get/post"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单行文本框--&gt;</span></span><br><span class="line">    username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">length</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、组合表单元素：</p><p>​    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>职务<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"work"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span>&amp;nsbn<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、html5验证表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    目前只有chrome和opera支持该特性。需要添加required属性。</p><p>4、html5日期控件：</p><p>​    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--type属性值为date表示插入一个日期控件--&gt;</span></span><br></pre></td></tr></table></figure><p>5、html5邮件、url输入控件、搜索控件</p><p>​    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>电子邮件<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>url<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"请输入搜索内容"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h1><h2 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>​    有些元素在浏览器中显示的过程中总是要另起一行，称为块级元素。如div。</p><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p>​    有些元素在浏览器中显示过程中总是和相邻元素处在同一行内，称为内联元素。如span。</p><h2 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h2><p>​    在网页中开启另一个小窗口，可以看到另一个网页。常用在网页中显示地图。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"450"</span> <span class="attr">height</span>=<span class="string">"350"</span> <span class="attr">src</span>=<span class="string">"http://maps.google.co.uk/maps?q=moma+new_yourk&amp;amp;output=embed"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加视频信息"><a href="#添加视频信息" class="headerlink" title="添加视频信息"></a>添加视频信息</h2><p>​    1、视频</p><p>​        属性：</p><p>​        </p><div class="table-container"><table><thead><tr><th>属性名称</th><th>属性值</th><th>属性解释</th></tr></thead><tbody><tr><td>src</td><td>视频路径</td><td></td></tr><tr><td>poster</td><td>图片路径</td><td>用于在未播放视频时在视频中显示的图片</td></tr><tr><td>width,height</td><td>指定播放视频的宽度和高度</td><td></td></tr><tr><td>controls</td><td></td><td>如果使用该属性，表明需要提供浏览器默认的播放器</td></tr><tr><td>autoplay</td><td></td><td>表明浏览器会自动播放视频</td></tr><tr><td>loop</td><td></td><td>表明在播放完视频之后会重复播放视频</td></tr><tr><td>preload</td><td>none/auto/metadata</td><td>在用户不点击播放时不加载视频/在加载页面时加载视频/只收集少量的视频信息</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"video/puppy.webm"</span> <span class="attr">poster</span>=<span class="string">"images/puppy.jpg"</span> <span class="attr">controls</span> <span class="attr">autoplay</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若是有多个视频，可以使用<source>标签进行操作，代替vedio标签中的src属性。在vedio标签中包含多个视频。</p><h2 id="添加音频信息"><a href="#添加音频信息" class="headerlink" title="添加音频信息"></a>添加音频信息</h2><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><p>属性与视频属性相同。</p><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;html标签总结&quot;&gt;&lt;a href=&quot;#html标签总结&quot; class=&quot;headerlink&quot; title=&quot;html标签总结&quot;&gt;&lt;/a&gt;html标签总结&lt;/h1&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yangsongwei.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="https://yangsongwei.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>python之进程和线程</title>
    <link href="https://yangsongwei.github.io/python%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.html"/>
    <id>https://yangsongwei.github.io/python之进程和线程.html</id>
    <published>2019-06-16T08:03:09.000Z</published>
    <updated>2019-06-27T13:52:50.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python实现进程和线程"><a href="#python实现进程和线程" class="headerlink" title="python实现进程和线程"></a>python实现进程和线程</h1><a id="more"></a><p>1、多进程实现代码：</p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getpid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">'启动下载进程，进程号[%d].'</span> % getpid())</span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    p1 = Process(target=download_task, args=(<span class="string">'Python从入门到住院.pdf'</span>, ))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2 = Process(target=download_task, args=(<span class="string">'Peking Hot.avi'</span>, ))</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>2、多线程实现代码：</p><p>​    （1）通过创建Thread类进行创建：</p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time,sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start=time()</span><br><span class="line">    thread1=Thread(target=download, args=(<span class="string">'Python从入门到住院.pdf'</span>,))</span><br><span class="line">    thread2=Thread(target=download,args=(<span class="string">'Peking Hot.avi'</span>,))</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    thread1.join()</span><br><span class="line">    thread2.join()</span><br><span class="line">    end=time()</span><br><span class="line">    print(<span class="string">'总共消耗了%.3f秒'</span>%(end-start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>(2)通过继承Thread类：</p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self._filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'开始下载%s...'</span> % self._filename)</span><br><span class="line">        time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        sleep(time_to_download)</span><br><span class="line">        print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (self._filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = DownloadTask(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = DownloadTask(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python实现进程和线程&quot;&gt;&lt;a href=&quot;#python实现进程和线程&quot; class=&quot;headerlink&quot; title=&quot;python实现进程和线程&quot;&gt;&lt;/a&gt;python实现进程和线程&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="https://yangsongwei.github.io/categories/python/"/>
    
    
      <category term="进程" scheme="https://yangsongwei.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="线程" scheme="https://yangsongwei.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python之文件和异常</title>
    <link href="https://yangsongwei.github.io/python%E4%B9%8B%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8.html"/>
    <id>https://yangsongwei.github.io/python之文件和异常.html</id>
    <published>2019-06-16T06:05:40.000Z</published>
    <updated>2019-06-27T13:53:19.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python文件和异常"><a href="#python文件和异常" class="headerlink" title="python文件和异常"></a>python文件和异常</h1><p>​    python中文件和异常的基础知识。</p><a id="more"></a><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>​    1、使用python内置函数open()函数。</p><p>​    2、文件操作模式：</p><p>​        </p><div class="table-container"><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td>‘r’</td><td>只读（默认模式）</td></tr><tr><td>‘w’</td><td>写入（会先截断之前的内容）</td></tr><tr><td>‘x’</td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td>‘a’</td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td>‘b’</td><td>二进制模式</td></tr><tr><td>‘t’</td><td>文本模式</td></tr><tr><td>‘+’</td><td>更新（既可以都又可以写）</td></tr></tbody></table></div><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、模式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python文件和异常&quot;&gt;&lt;a href=&quot;#python文件和异常&quot; class=&quot;headerlink&quot; title=&quot;python文件和异常&quot;&gt;&lt;/a&gt;python文件和异常&lt;/h1&gt;&lt;p&gt;​    python中文件和异常的基础知识。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://yangsongwei.github.io/categories/python/"/>
    
    
      <category term="文件" scheme="https://yangsongwei.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="异常" scheme="https://yangsongwei.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>经济学思维方式（二）</title>
    <link href="https://yangsongwei.github.io/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>https://yangsongwei.github.io/经济学思维方式（二）.html</id>
    <published>2019-06-14T15:45:57.000Z</published>
    <updated>2019-06-27T13:54:00.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、导言"><a href="#一、导言" class="headerlink" title="一、导言"></a>一、导言</h1><p>​    经济学思维方式中第二章讲述的基本的经济学概念总结。</p><a id="more"></a><h1 id="二、比较优势法则"><a href="#二、比较优势法则" class="headerlink" title="二、比较优势法则"></a>二、比较优势法则</h1><h1 id="三、中间人"><a href="#三、中间人" class="headerlink" title="三、中间人"></a>三、中间人</h1><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、导言&quot;&gt;&lt;a href=&quot;#一、导言&quot; class=&quot;headerlink&quot; title=&quot;一、导言&quot;&gt;&lt;/a&gt;一、导言&lt;/h1&gt;&lt;p&gt;​    经济学思维方式中第二章讲述的基本的经济学概念总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经济学思维方式" scheme="https://yangsongwei.github.io/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>复杂网络理论及其应用（二）</title>
    <link href="https://yangsongwei.github.io/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%90%86%E8%AE%BA%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>https://yangsongwei.github.io/复杂网络理论及其应用（二）.html</id>
    <published>2019-06-08T06:43:47.000Z</published>
    <updated>2019-06-27T13:53:29.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-网络拓扑结构基本模型及其性质"><a href="#第二章-网络拓扑结构基本模型及其性质" class="headerlink" title="第二章 网络拓扑结构基本模型及其性质"></a>第二章 网络拓扑结构基本模型及其性质</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    本章总结积累基本的模型，包括规则网络、随机图、小世界网络、无标度网络、等级网络和局域世界演化网络模型。</p><a id="more"></a><h2 id="规则网络"><a href="#规则网络" class="headerlink" title="规则网络"></a>规则网络</h2><p>​    1、规则网络模型：最近邻网络(只与周围的邻居结点相邻)</p><p>​    2、</p><h2 id="随机图-完全随机网络"><a href="#随机图-完全随机网络" class="headerlink" title="随机图(完全随机网络)"></a>随机图(完全随机网络)</h2><p>​    1、ER随机图：网络中任意两个点之间存在联系的概率是p。</p><p>​        平均度：<k>=p(N-1)  </k></p><p>​        </p><h2 id="小世界网络模型"><a href="#小世界网络模型" class="headerlink" title="小世界网络模型"></a>小世界网络模型</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​    是现实中的网络的表现，介于完全规则网络和随机网络之间。</p><p>​    即具有<strong>较短的平均路径长度</strong>又具有<strong>较高的聚类系数</strong>的网络称为小世界网络。</p><h3 id="统计性质"><a href="#统计性质" class="headerlink" title="统计性质"></a>统计性质</h3><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章-网络拓扑结构基本模型及其性质&quot;&gt;&lt;a href=&quot;#第二章-网络拓扑结构基本模型及其性质&quot; class=&quot;headerlink&quot; title=&quot;第二章 网络拓扑结构基本模型及其性质&quot;&gt;&lt;/a&gt;第二章 网络拓扑结构基本模型及其性质&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;​    本章总结积累基本的模型，包括规则网络、随机图、小世界网络、无标度网络、等级网络和局域世界演化网络模型。&lt;/p&gt;
    
    </summary>
    
      <category term="复杂网络理论" scheme="https://yangsongwei.github.io/categories/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="网络拓扑基本模型" scheme="https://yangsongwei.github.io/tags/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E5%9F%BA%E6%9C%AC%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="网络性质" scheme="https://yangsongwei.github.io/tags/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%B4%A8/"/>
    
  </entry>
  
  <entry>
    <title>java基础之JAR文件</title>
    <link href="https://yangsongwei.github.io/java%E5%9F%BA%E7%A1%80%E4%B9%8BJAR%E6%96%87%E4%BB%B6.html"/>
    <id>https://yangsongwei.github.io/java基础之JAR文件.html</id>
    <published>2019-06-07T12:34:19.000Z</published>
    <updated>2019-06-27T13:51:53.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java中JAR文件的使用"><a href="#java中JAR文件的使用" class="headerlink" title="java中JAR文件的使用"></a>java中JAR文件的使用</h1><h2 id="JAR文件"><a href="#JAR文件" class="headerlink" title="JAR文件"></a>JAR文件</h2><p>​    全程Java Archive File，及java档案文件。</p><a id="more"></a><h2 id="JAR命令详解"><a href="#JAR命令详解" class="headerlink" title="JAR命令详解"></a>JAR命令详解</h2><p>​    1、创建JAR文件：jar cf test.jar test  不显示压缩过程。</p><p>​    2、创建jar文件，并显示压缩过程：jar cvf test.jar test</p><p>​    3、不使用清单文件： jar cvfM test.jar test</p><p>​    4、查看JAR包的内容：jar tf test.jar</p><p>​    5、解压缩文件：jar xf test.jar</p><p>​    6、带提示信息解压缩：jar xf test.jar</p><h2 id="如何制作可执行的JAR包"><a href="#如何制作可执行的JAR包" class="headerlink" title="如何制作可执行的JAR包"></a>如何制作可执行的JAR包</h2><p>​    jar cvfe test.jar test.Test test</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java中JAR文件的使用&quot;&gt;&lt;a href=&quot;#java中JAR文件的使用&quot; class=&quot;headerlink&quot; title=&quot;java中JAR文件的使用&quot;&gt;&lt;/a&gt;java中JAR文件的使用&lt;/h1&gt;&lt;h2 id=&quot;JAR文件&quot;&gt;&lt;a href=&quot;#JAR文件&quot; class=&quot;headerlink&quot; title=&quot;JAR文件&quot;&gt;&lt;/a&gt;JAR文件&lt;/h2&gt;&lt;p&gt;​    全程Java Archive File，及java档案文件。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangsongwei.github.io/categories/java/"/>
    
    
      <category term="JAR文件" scheme="https://yangsongwei.github.io/tags/JAR%E6%96%87%E4%BB%B6/"/>
    
      <category term="java" scheme="https://yangsongwei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>js基础语法</title>
    <link href="https://yangsongwei.github.io/js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
    <id>https://yangsongwei.github.io/js基础语法.html</id>
    <published>2019-06-04T15:52:20.000Z</published>
    <updated>2019-06-27T14:00:38.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>​    1、js中变量名区分大小写。</p><a id="more"></a><p>​    2、如果变量只声明不赋值，该变量的值是undefined。</p><p>​    3、变量提升：js引擎在执行代码时，会将所有声明变量的语句提升到代码的头部。所以下面的代码不会报错。</p><p>​    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="keyword">var</span> b=<span class="string">"yangsongwei"</span>;</span><br></pre></td></tr></table></figure><p>​    两种形式：// 和/<em>   </em>/</p><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><p>​    1、条件语句</p><p>​        </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、switch结构</p><p>​    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(fruit)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"banana"</span>:</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"apple"</span>:</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、三目运算符</p><p>​    (条件) ？ 表达式1：表达式2</p><p>​    4、循环语句</p><p>​    (1)while循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(条件)&#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>​    1、typeof运算符：返回一个数据的类型信息。</p><p>​    2、与数值相关的全局方法：</p><p>​        (1)parseInt()    将字符串转化为整数。</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>​    1、字符串默认只能写在同一行中，多行会报错，但是可以使用反斜杠来表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a\</span></span><br><span class="line"><span class="string">b\</span></span><br><span class="line"><span class="string">c'</span>;</span><br><span class="line"><span class="string">"abc"</span></span><br></pre></td></tr></table></figure><p>​    2、可以使用运算符(+)连接多个单行字符串。</p><p>​    3、字符串可以视为字符数组，可以通过下标的方式进行访问。</p><p>​    4、.length返回的是字符串的长度。</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>​    1、对象在js中就是一组键值对。</p><p>​    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"><span class="string">'foo'</span>:<span class="string">'Hello'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、如果键名是数值，会自动被转换为字符串。</p><p>​    3、对象的每一个键名称为属性，属性可以为任何一个类型，若键值的属性的值是函数的话，称为对象的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test=&#123;</span><br><span class="line">    p:<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    4、在处理对象时，如果有括号，解析为对象，没有括号的话，解析为字符串。</p><p>​    5、对属性进行读取，采用”.”或下标。</p><p>​    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test=&#123;</span><br><span class="line"><span class="number">1</span>:<span class="string">"yang"</span>,</span><br><span class="line"><span class="number">2</span>:<span class="string">"song"</span>,</span><br><span class="line"><span class="number">3</span>:<span class="string">"wei"</span>,</span><br><span class="line">t1:<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line">test.t1(<span class="number">2</span>)</span><br><span class="line">test[<span class="string">'t1'</span>]</span><br></pre></td></tr></table></figure><p>​    6、属性的查看：</p><p>​    Object.keys(obj)</p><p>​    7、属性删除：</p><p>​    delete obj.p</p><p>​    8、属性是否存在：</p><p>​    ‘p’ in obj    缺点：不能判断属性是否是自己的还是集成的。</p><p>​    obj.hasOwnProperty(p) 用于判断属性是都是对象自身所有的属性。</p><p>​    9、属性的遍历：</p><p>​    for … in …循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    a:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"键名："</span>,i);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"键值"</span>,obj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    10、with语句：</p><p>​    用于操纵同一个对象的多个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(对象)&#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>​    1、函数声明的三种方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">S</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">var</span> print=<span class="function"><span class="keyword">function</span>(<span class="params">S</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="keyword">var</span> print=<span class="keyword">new</span> <span class="built_in">Function</span>(</span><br><span class="line"><span class="string">'x'</span>,</span><br><span class="line">    <span class="string">'y'</span>,</span><br><span class="line">    <span class="string">'return x+y'</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//第三种方式中只有倒数第一个被称作函数体，前面的所有的都是变量。</span></span><br></pre></td></tr></table></figure><p>​    </p><p>​    2、函数名提升：和变量名提升相同，可以把一个函数声明提升到代码的头部。</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;p&gt;​    1、js中变量名区分大小写。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://yangsongwei.github.io/categories/javascript/"/>
    
    
      <category term="js基础语法" scheme="https://yangsongwei.github.io/tags/js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>复杂网络理论及其应用之初入</title>
    <link href="https://yangsongwei.github.io/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%90%86%E8%AE%BA%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%9D%E5%85%A5.html"/>
    <id>https://yangsongwei.github.io/复杂网络理论及其应用之初入.html</id>
    <published>2019-06-04T08:49:34.000Z</published>
    <updated>2019-06-27T13:53:39.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h2><h3 id="复杂网络研究简史"><a href="#复杂网络研究简史" class="headerlink" title="复杂网络研究简史"></a>复杂网络研究简史</h3><h4 id="七桥问题"><a href="#七桥问题" class="headerlink" title="七桥问题"></a>七桥问题</h4><p>​    </p><h4 id="小世界实验"><a href="#小世界实验" class="headerlink" title="小世界实验"></a>小世界实验</h4><p>​    即美国哈佛大学社会心理学家Stanley Milgram通过一些社会后给出的推断：地球上任意两个人之间的平均距离是6—六度分割理论。</p><h4 id="弱连接的强度"><a href="#弱连接的强度" class="headerlink" title="弱连接的强度"></a>弱连接的强度</h4><a id="more"></a><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>​    1、网络的直径(diameter):网络中任意节点之间的距离的最大值成为网络的直径，记为D。</p><p>​        </p><script type="math/tex; mode=display">D=\max_{i,j}d_{ij}</script><p>​    2、网络的平均长度L定义为任意两个节点之间的距离的平均值，即：</p><p>​    </p><script type="math/tex; mode=display">L=\frac1{\frac12N(N+1)}\sum_{i{\ge}j}d_{ij}</script><p>​    3、聚类系数：网络中的一个节点</p><p>​    4、度与度的分布：</p><p>​        出度：</p><p>​        入度：</p><p>​        网络的平均度：         </p><p>​    5、幂律分布/无标度分布：</p><p>​        在一个分布为具有幂率形式的大规模无标度网络中，绝大多数节点的度的相对较低，但存在少量的节点具有很高的度。</p><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引论&quot;&gt;&lt;a href=&quot;#引论&quot; class=&quot;headerlink&quot; title=&quot;引论&quot;&gt;&lt;/a&gt;引论&lt;/h2&gt;&lt;h3 id=&quot;复杂网络研究简史&quot;&gt;&lt;a href=&quot;#复杂网络研究简史&quot; class=&quot;headerlink&quot; title=&quot;复杂网络研究简史&quot;&gt;&lt;/a&gt;复杂网络研究简史&lt;/h3&gt;&lt;h4 id=&quot;七桥问题&quot;&gt;&lt;a href=&quot;#七桥问题&quot; class=&quot;headerlink&quot; title=&quot;七桥问题&quot;&gt;&lt;/a&gt;七桥问题&lt;/h4&gt;&lt;p&gt;​    &lt;/p&gt;
&lt;h4 id=&quot;小世界实验&quot;&gt;&lt;a href=&quot;#小世界实验&quot; class=&quot;headerlink&quot; title=&quot;小世界实验&quot;&gt;&lt;/a&gt;小世界实验&lt;/h4&gt;&lt;p&gt;​    即美国哈佛大学社会心理学家Stanley Milgram通过一些社会后给出的推断：地球上任意两个人之间的平均距离是6—六度分割理论。&lt;/p&gt;
&lt;h4 id=&quot;弱连接的强度&quot;&gt;&lt;a href=&quot;#弱连接的强度&quot; class=&quot;headerlink&quot; title=&quot;弱连接的强度&quot;&gt;&lt;/a&gt;弱连接的强度&lt;/h4&gt;
    
    </summary>
    
      <category term="复杂网络理论及其应用" scheme="https://yangsongwei.github.io/categories/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%90%86%E8%AE%BA%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="复杂网络" scheme="https://yangsongwei.github.io/tags/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C/"/>
    
      <category term="初入" scheme="https://yangsongwei.github.io/tags/%E5%88%9D%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>java web入门（一） jsp学习</title>
    <link href="https://yangsongwei.github.io/java-web%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89-jsp%E5%AD%A6%E4%B9%A0.html"/>
    <id>https://yangsongwei.github.io/java-web入门（一）-jsp学习.html</id>
    <published>2019-06-03T12:52:53.000Z</published>
    <updated>2019-06-27T13:51:38.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="jsp内容学习"><a href="#jsp内容学习" class="headerlink" title="jsp内容学习"></a>jsp内容学习</h2><a id="more"></a><h2 id="jsp页面中的三种注释"><a href="#jsp页面中的三种注释" class="headerlink" title="jsp页面中的三种注释"></a>jsp页面中的三种注释</h2><p>​    </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一种：&lt;!--&lt;%=expression%&gt;--&gt;</span><br><span class="line">第二种：&lt;%--注释内容--%&gt;</span><br><span class="line">第三种：&lt;%<span class="comment">//%&gt;  &lt;% /*  */%&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jsp指令"><a href="#jsp指令" class="headerlink" title="jsp指令"></a>jsp指令</h2><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h2 id=&quot;jsp内容学习&quot;&gt;&lt;a href=&quot;#jsp内容学习&quot; class=&quot;headerlink&quot; title=&quot;jsp内容学习&quot;&gt;&lt;/a&gt;jsp内容学习&lt;/h2&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangsongwei.github.io/categories/java/"/>
    
    
      <category term="jsp" scheme="https://yangsongwei.github.io/tags/jsp/"/>
    
      <category term="java web" scheme="https://yangsongwei.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>机器学习实战之KNN算法</title>
    <link href="https://yangsongwei.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%E4%B9%8BKNN%E7%AE%97%E6%B3%95.html"/>
    <id>https://yangsongwei.github.io/机器学习实战之KNN算法.html</id>
    <published>2019-05-16T09:58:58.000Z</published>
    <updated>2019-05-18T15:11:10.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>​    最近在学习《机器学习实战》这本书，希望把学到的机器学习知识能够应用下来。所有的代码都在我的github的<a href="https://github.com/yangsongwei/mllearning" target="_blank" rel="noopener">mllearning</a>仓库中。本章记录学习KNN算法以及应用。</p><a id="more"></a><p>[TOC]</p><h2 id="数学原理（主要参考）"><a href="#数学原理（主要参考）" class="headerlink" title="数学原理（主要参考）"></a>数学原理（主要参考）</h2><p>​    </p><h2 id="KNN近邻算法"><a href="#KNN近邻算法" class="headerlink" title="KNN近邻算法"></a>KNN近邻算法</h2><h3 id="K-近邻算法概述"><a href="#K-近邻算法概述" class="headerlink" title="K-近邻算法概述"></a>K-近邻算法概述</h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>​    采用测量不同特征值之间的距离进行分类。工作原理：存在一个样本数据集合，并且样本集中每个数据都存在标签，即知道样本集中每一数据与所属类别的对应关系。输入一个没有标签的数据，计算新数据的每一个特征和样本集中数据对应特征，然后根据算法提取出样本集中特征最相似的数据的分类标签；通常，我们只选择样本集中前K个醉相思的数据，即为KNN中的K值。通常K为不超过20的整数。</p><h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><p>​    对电影数据进行分类。具体数据格式如表1.1所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">每部电影中的打斗镜头数、接吻镜头数以及电影类型评估</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">电影名称</td><td style="text-align:center">打斗镜头</td><td style="text-align:center">接吻镜头</td><td style="text-align:center">电影类型</td></tr><tr><td style="text-align:center">California Man</td><td style="text-align:center">3</td><td style="text-align:center">104 爱情片</td><td style="text-align:center">爱情片</td></tr><tr><td style="text-align:center">He’s Not Really into Dudes</td><td style="text-align:center">2</td><td style="text-align:center">100</td><td style="text-align:center">爱情片</td></tr><tr><td style="text-align:center">Beautiful Woman</td><td style="text-align:center">1</td><td style="text-align:center">81</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Kevin Longblade</td><td style="text-align:center">101</td><td style="text-align:center">10</td><td style="text-align:center">动作片</td></tr><tr><td style="text-align:center">Robo Slayer 3000</td><td style="text-align:center">99</td><td style="text-align:center">5</td><td style="text-align:center">动作片</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">表1.1</td><td style="text-align:center"></td></tr></tbody></table></div><p>我们选取每部电影中的打斗镜头和接吻镜头作为特征。通过计算未知电影与样本集中其他电影的距离。如图1.1</p><p><img src="机器学习实战之KNN算法\knnresult.png" alt></p><p>​                                            图1.1</p><p>得到所有的距离，按照递增排序，可以找到k个距离相近的电影。假设距离是3，我们得到距离最小的三部电影是He’s Not Really into Dudes、Beautiful Woman和California Man。三部电影全是爱情片，因此我们判断未知电影是爱情片。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导言&quot;&gt;&lt;a href=&quot;#导言&quot; class=&quot;headerlink&quot; title=&quot;导言&quot;&gt;&lt;/a&gt;导言&lt;/h2&gt;&lt;p&gt;​    最近在学习《机器学习实战》这本书，希望把学到的机器学习知识能够应用下来。所有的代码都在我的github的&lt;a href=&quot;https://github.com/yangsongwei/mllearning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mllearning&lt;/a&gt;仓库中。本章记录学习KNN算法以及应用。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://yangsongwei.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习实战" scheme="https://yangsongwei.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/"/>
    
      <category term="KNN" scheme="https://yangsongwei.github.io/tags/KNN/"/>
    
  </entry>
  
  <entry>
    <title>git命令手册</title>
    <link href="https://yangsongwei.github.io/git%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C.html"/>
    <id>https://yangsongwei.github.io/git命令手册.html</id>
    <published>2019-05-16T09:31:29.000Z</published>
    <updated>2019-05-16T09:49:29.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><p>（备注：参考自廖雪峰博客，地址：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="廖雪峰博客" target="_blank" rel="noopener">廖雪峰博客</a>   pdf版本：<a href="https://pan.baidu.com/s/1mwisgcbaFx35fus331YYrg" title="点击下载" target="_blank" rel="noopener">点击下载</a> 提取码：thff)</p><a id="more"></a><h2 id="一、本地操作"><a href="#一、本地操作" class="headerlink" title="一、本地操作"></a>一、本地操作</h2><p>1、初始化仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  init</span><br></pre></td></tr></table></figure><p>2、将文件添加进仓库缓冲区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add filename</span><br></pre></td></tr></table></figure><p>3、将文件添加进仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;message&quot;</span><br></pre></td></tr></table></figure><p>4、查看仓库的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>5、查看仓库中文件具体修改的信息：</p><pre><code>git diff filename</code></pre><p>6、仓库版本回退：</p><pre><code>git reset --hard HEAD~n（HEAD 是当前版本，HEAD^是前一个版本，n代表前面第n格版本）</code></pre><p>7、撤销修改：</p><pre><code>git checkout -- filename</code></pre><p>8、删除版本库中的文件：</p><pre><code>git rm filename</code></pre><h2 id="二、远程操作："><a href="#二、远程操作：" class="headerlink" title="二、远程操作："></a>二、远程操作：</h2><p>（前提是你要将你的工作目录改为你的本地仓库）</p><pre><code>1、本地仓库关联远程仓库：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure><pre><code>2、将本地仓库的内容推送到远程仓库：    git push -u origin master（第一次关联时需要加上-u）3、克隆远程仓库到本地仓库：    </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:michaelliao/gitskills.git</span><br></pre></td></tr></table></figure><h2 id="三、分支管理"><a href="#三、分支管理" class="headerlink" title="三、分支管理"></a>三、分支管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个新的分支：</span><br><span class="line"></span><br><span class="line">git checkout -b dev（创建分支并且切换到dev分支）</span><br><span class="line"></span><br><span class="line">相当于：</span><br><span class="line"></span><br><span class="line">git branch dev（创建dev分支）</span><br><span class="line"></span><br><span class="line">git checkout dev(切换到dev 分支)</span><br><span class="line"></span><br><span class="line">2、查看当前分支：</span><br><span class="line"></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">3、切换分支：</span><br><span class="line"></span><br><span class="line">git checkout branchname</span><br><span class="line"></span><br><span class="line">4、合并分支到当前分支：</span><br><span class="line"></span><br><span class="line">git merge branchname</span><br><span class="line"></span><br><span class="line">5、删除分支：</span><br><span class="line"></span><br><span class="line">git branch -d branchname</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命令&quot; class=&quot;headerlink&quot; title=&quot;git常用命令&quot;&gt;&lt;/a&gt;git常用命令&lt;/h1&gt;&lt;p&gt;（备注：参考自廖雪峰博客，地址：&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; title=&quot;廖雪峰博客&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰博客&lt;/a&gt;   pdf版本：&lt;a href=&quot;https://pan.baidu.com/s/1mwisgcbaFx35fus331YYrg&quot; title=&quot;点击下载&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击下载&lt;/a&gt; 提取码：thff)&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://yangsongwei.github.io/categories/git/"/>
    
    
      <category term="git常用命令" scheme="https://yangsongwei.github.io/tags/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识补漏</title>
    <link href="https://yangsongwei.github.io/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%A1%A5%E6%BC%8F.html"/>
    <id>https://yangsongwei.github.io/java基础知识补漏.html</id>
    <published>2019-05-16T03:45:26.000Z</published>
    <updated>2019-06-27T13:52:03.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近在补充自己的java基础知识，研究生毕业可能从事开发工作，所以希望早点对这方面知识进行补充。最近在阅读《java程序员从菜鸟到笨鸟》和《疯狂Java讲义》。</p><a id="more"></a><h2 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h2><h3 id="一、根据CLASSPATH环境变量定位类"><a href="#一、根据CLASSPATH环境变量定位类" class="headerlink" title="一、根据CLASSPATH环境变量定位类"></a>一、根据CLASSPATH环境变量定位类</h3><p>​    在刚开始学习java，教程中给的配置环境变量的过程中几乎都会让配置CLASSPATH环境变量，但从来不给为什么要配置。原因是：</p><p>​    在使用“java Java类名”命令来运行java程序的时候，JRE无法搜索到java类，需要配置CLASSPATH中的（.）表示在当前路径下执行，此外，还需要JDK中lib下的dt.jart和tools.jar工具包，所以需要把这两个文件添加到CLASSPATH环境变量中。但是在java 1.5以上版本中，java就不需要配置CLASSPATH也能够运行java程序。</p><h3 id="二、java内存回收机制"><a href="#二、java内存回收机制" class="headerlink" title="二、java内存回收机制"></a>二、java内存回收机制</h3><p>​    java程序的内存分配和回收都是由JRE在后台自动进行。JRE挥挥手那些不再使用的内存。通常JRE会提供一个后台线程来检测和控制，一般都是在CPU空闲或者内存不足的时候自动进行垃圾回收。</p><p>​    垃圾回收的过程：在Java中，当没有引用变量指向原先分配给某个对象的内存时，该内存便成为垃圾，JVM的一个超级线程会自动释放该内存区。</p><p>​    因此，在编写java程序时，一个基本原则：对于不再需要的对象，不要引用它们。因为如果一直保持对对象的引用，垃圾回收机制不会回收该对象。</p><h3 id="三、文档注释"><a href="#三、文档注释" class="headerlink" title="三、文档注释"></a>三、文档注释</h3><p>​    如果在编写Java源代码时，添加了合适的文档注释，可以通过JDK提供的javadoc工具将源代码的文档注释提取成一份系统的API文档。</p><p>​    javadoc工具只处理文档原文件中在类、接口、方法、成员变量、构造器和内部类之前的注释。</p><p>注释格式是：以(/*<em>)开头，以(\</em>/)结尾。具体格式如下：</p><p>​     <img src="java基础知识补漏/javadoc.png" alt></p><p>​    javadoc基本命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc 选项 Java源文件|包</span><br></pre></td></tr></table></figure><h3 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h3><p>​    1、数组的两种定义方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type[] arraytname</span><br><span class="line">type arrayname[]</span><br></pre></td></tr></table></figure><p>​    2、初始化：</p><p>​    在声明完数组织后，并没有为数组分配内存，需要进一步进行数组的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intarr;</span><br><span class="line">#静态初始化</span><br><span class="line">intarr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">#动态初始化</span><br><span class="line">intarr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>​    3、数组深度理解：</p><p>​    数组引用变量只是一个变量，数组对象上存储在堆内存区中，而数组引用变量存储在栈内存中。</p><h3 id="五、面向对象"><a href="#五、面向对象" class="headerlink" title="五、面向对象"></a>五、面向对象</h3><h4 id="1、类的定义："><a href="#1、类的定义：" class="headerlink" title="1、类的定义："></a>1、类的定义：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class [类型]&#123;</span><br><span class="line"><span class="number">0</span>到多个构造器；</span><br><span class="line">    <span class="number">0</span>到多个属性值；</span><br><span class="line">    <span class="number">0</span>到多个方法；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、类的方法："><a href="#2、类的方法：" class="headerlink" title="2、类的方法："></a>2、类的方法：</h4><p>​    (1)方法重载：</p><p>​        方法重载要求：”两同一不同”—同一个类中的方法名相同，参数列表不同。返回值类型、修饰符与重载无关。</p><h4 id="3、成员变量："><a href="#3、成员变量：" class="headerlink" title="3、成员变量："></a>3、成员变量：</h4><p>​    (1)成员变量和局部变量：</p><p>​        <img src="java基础知识补漏\classvariable.png" alt></p><p>​    (2)注意：</p><p>​    在访问类变量的时候，尽量使用类来进行访问而不是使用对象进行访问,容易造成歧义。</p><p>​    (3)隐藏和封装：</p><p>​    <img src="java基础知识补漏\fengzhuang.png" alt></p><p>​    <img src="java基础知识补漏\fengzhuang1.png" alt></p><h4 id="4、package、import和import-static："><a href="#4、package、import和import-static：" class="headerlink" title="4、package、import和import static："></a>4、package、import和import static：</h4><p>​    包：引入包机制，提供了类的多层命名空间，用于解决类的命名冲突、类文件管理等问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> packageName;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建程序</span></span><br><span class="line">ackage monty;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译命令</span></span><br><span class="line">javac -d [目标路径] Dog</span><br><span class="line"><span class="comment">//运行命令</span></span><br><span class="line">java monty.Dog</span><br><span class="line"></span><br><span class="line"><span class="comment">//在其他文件中导入包</span></span><br><span class="line"><span class="keyword">import</span> 包+类名</span><br></pre></td></tr></table></figure><h4 id="5、深入构造器"><a href="#5、深入构造器" class="headerlink" title="5、深入构造器"></a>5、深入构造器</h4><p>​    （1）如何在一个构造器中调用里一个构造器</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String color;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> weight;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String name,String color)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.color=color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String name,String color,<span class="keyword">double</span> weight)</span></span>&#123;</span><br><span class="line"><span class="comment">//通过this调用另一个构造器</span></span><br><span class="line"><span class="keyword">this</span>(name,color);</span><br><span class="line"><span class="keyword">this</span>.weight=weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、继承"><a href="#6、继承" class="headerlink" title="6、继承"></a>6、继承</h4><p>​    JAVA继承的特点是单继承，每一个子类只能有一个直接父类，使用关键字extends。</p><p>​    （1）方法重写</p><p>​    遵循”两同两小一大”：方法名相同、形参列表相同、子类方法返回值类型比父类方法返回值类型更小或者相等。</p><p>​    (2)在子类中使用父类的方法：super关键字。</p><p>​    (3)instanceof 运算符 ：判断一个对象是否是一个类。</p><p>​    </p><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    最近在补充自己的java基础知识，研究生毕业可能从事开发工作，所以希望早点对这方面知识进行补充。最近在阅读《java程序员从菜鸟到笨鸟》和《疯狂Java讲义》。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangsongwei.github.io/categories/java/"/>
    
    
      <category term="java基础知识" scheme="https://yangsongwei.github.io/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="补漏" scheme="https://yangsongwei.github.io/tags/%E8%A1%A5%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建过程</title>
    <link href="https://yangsongwei.github.io/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B.html"/>
    <id>https://yangsongwei.github.io/个人博客搭建过程.html</id>
    <published>2019-05-15T12:18:06.000Z</published>
    <updated>2019-05-15T12:56:28.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    最近写完论文之后，闲来无事，打算自己基于gitpages来实现一个自己的个人技术博客，忙了一天半，终于把自己的博客搭建好了，基本的样子都有了。希望能好好的写文章。因此，把整个搭建过程参考到的文章总结一下，希望后来的人能够少走弯路。</p><a id="more"></a><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="1、初步搭建"><a href="#1、初步搭建" class="headerlink" title="1、初步搭建"></a>1、初步搭建</h3><p>​    开始创建项目时，采用<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学的教程</a>，一直到修改主题都是正确的，其中如果在使用npm下载包时出现错误，可以考虑使用淘宝的包下载工具<strong>cnpm</strong>。</p><p>​    然后开始选择博客的主题，我的<a href>博客</a>使用的是NEXT主题，这个主题的开发者将整个配置过程写的很详细。非常适合初学者进行个人博客创建。</p><p>​    NEXT主题配置首页：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NEXT主题配置</a></p><p>​    基本上按照官方文档进行搭建，大部分功能都是可以实现的。</p><h3 id="2、博客功能完善："><a href="#2、博客功能完善：" class="headerlink" title="2、博客功能完善："></a>2、博客功能完善：</h3><p>​    (1)如果不想用NEXT主题，有一个博客推荐比较好的主题。<a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">博客地址</a></p><p>​    (2)添加评论功能：截止2019/5/15，本文使用的插件：<a href="https://blog.smoker.cc/web/add-comments-livere-for-hexo-theme-next.html" target="_blank" rel="noopener">来必力</a>,一共尝试了不同的评论系统：</p><p>​        -畅言：注册过程中需要使用网站的ICP备案，特别麻烦，所以弃用。</p><p>​        -DISQUS:使用还可以，就是需要外网访问，墙内用户访问不到评论，略坑。</p><p>​    (3)网站seo：为了能够让浏览器爬虫爬取到你的站点，需要进行seo优化，<a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">优化教程</a>.建议不要进行百度            的优化，很坑。</p><p>​    (4)引言</p><p>​    最近写完论文之后，闲来无事，打算自己基于gitpages来实现一个自己的个人技术博客，忙了一天半，终于把自己的博客搭建好了，基本的样子都有了。希望能好好的写文章。因此，把整个搭建过程参考到的文章总结一下，希望后来的人能够少走弯路。</p><!--more--><h2 id="搭建过程-1"><a href="#搭建过程-1" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="1、初步搭建-1"><a href="#1、初步搭建-1" class="headerlink" title="1、初步搭建"></a>1、初步搭建</h3><p>​    开始创建项目时，采用<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学的教程</a>，一直到修改主题都是正确的，其中如果在使用npm下载包时出现错误，可以考虑使用淘宝的包下载工具<strong>cnpm</strong>。</p><p>​    然后开始选择博客的主题，我的<a href>博客</a>使用的是NEXT主题，这个主题的开发者将整个配置过程写的很详细。非常适合初学者进行个人博客创建。</p><p>​    NEXT主题配置首页：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NEXT主题配置</a></p><p>​    基本上按照官方文档进行搭建，大部分功能都是可以实现的。</p><h3 id="2、博客功能完善：-1"><a href="#2、博客功能完善：-1" class="headerlink" title="2、博客功能完善："></a>2、博客功能完善：</h3><p>​    (1)如果不想用NEXT主题，有一个博客推荐比较好的主题。<a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">博客地址</a></p><p>​    (2)添加评论功能：截止2019/5/15，本文使用的插件：<a href="https://blog.smoker.cc/web/add-comments-livere-for-hexo-theme-next.html" target="_blank" rel="noopener">来必力</a>,一共尝试了不同的评论系统：</p><p>​        -畅言：注册过程中需要使用网站的ICP备案，特别麻烦，所以弃用。</p><p>​        -DISQUS:使用还可以，就是需要外网访问，墙内用户访问不到评论，略坑。</p><p>​    (3)网站seo：为了能够让浏览器爬虫爬取到你的站点，需要进行seo优化，<a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">优化教程</a>.建议不要进行百度            的优化，很坑。</p><p>​    (4)能够配置功能很多的网页：<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">Hexo-NexT配置超炫网页效果</a>，其中大部分是能够用的，有的还没测试，        希望有时间再添加。</p><p>​    (5)hexo博客官网：<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">网址</a></p><p>​    (6)对上线博客的样式进行修改：<a href="https://zouzls.github.io/2017/03/17/Next%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF%E4%B8%AA%E6%80%A7%E5%8C%96DIY/" target="_blank" rel="noopener">Next主题背景个性化DIY</a></p><p>​    </p><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;​    最近写完论文之后，闲来无事，打算自己基于gitpages来实现一个自己的个人技术博客，忙了一天半，终于把自己的博客搭建好了，基本的样子都有了。希望能好好的写文章。因此，把整个搭建过程参考到的文章总结一下，希望后来的人能够少走弯路。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://yangsongwei.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://yangsongwei.github.io/tags/hexo/"/>
    
      <category term="next" scheme="https://yangsongwei.github.io/tags/next/"/>
    
  </entry>
  
</feed>
