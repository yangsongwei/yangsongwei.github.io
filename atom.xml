<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>monty12|博客</title>
  
  <subtitle>菜鸡一枚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangsongwei.github.io/"/>
  <updated>2019-05-16T09:46:01.468Z</updated>
  <id>https://yangsongwei.github.io/</id>
  
  <author>
    <name>yangsongwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git命令手册</title>
    <link href="https://yangsongwei.github.io/git%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C.html"/>
    <id>https://yangsongwei.github.io/git命令手册.html</id>
    <published>2019-05-16T09:31:29.000Z</published>
    <updated>2019-05-16T09:46:01.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><p>（备注：参考自廖雪峰博客，地址：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="廖雪峰博客" target="_blank" rel="noopener">廖雪峰博客</a>   pdf版本：<a href="链接:https://pan.baidu.com/s/1mwisgcbaFx35fus331YYrg" title="点击下载">点击下载</a> 提取码：thff)</p><a id="more"></a><h2 id="一、本地操作"><a href="#一、本地操作" class="headerlink" title="一、本地操作"></a>一、本地操作</h2><p>1、初始化仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  init</span><br></pre></td></tr></table></figure><p>2、将文件添加进仓库缓冲区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add filename</span><br></pre></td></tr></table></figure><p>3、将文件添加进仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;message&quot;</span><br></pre></td></tr></table></figure><p>4、查看仓库的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>5、查看仓库中文件具体修改的信息：</p><pre><code>git diff filename</code></pre><p>6、仓库版本回退：</p><pre><code>git reset --hard HEAD~n（HEAD 是当前版本，HEAD^是前一个版本，n代表前面第n格版本）</code></pre><p>7、撤销修改：</p><pre><code>git checkout -- filename</code></pre><p>8、删除版本库中的文件：</p><pre><code>git rm filename</code></pre><h2 id="二、远程操作："><a href="#二、远程操作：" class="headerlink" title="二、远程操作："></a>二、远程操作：</h2><p>（前提是你要将你的工作目录改为你的本地仓库）</p><pre><code>1、本地仓库关联远程仓库：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure><pre><code>2、将本地仓库的内容推送到远程仓库：    git push -u origin master（第一次关联时需要加上-u）3、克隆远程仓库到本地仓库：    </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:michaelliao/gitskills.git</span><br></pre></td></tr></table></figure><h2 id="三、分支管理"><a href="#三、分支管理" class="headerlink" title="三、分支管理"></a>三、分支管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个新的分支：</span><br><span class="line"></span><br><span class="line">git checkout -b dev（创建分支并且切换到dev分支）</span><br><span class="line"></span><br><span class="line">相当于：</span><br><span class="line"></span><br><span class="line">git branch dev（创建dev分支）</span><br><span class="line"></span><br><span class="line">git checkout dev(切换到dev 分支)</span><br><span class="line"></span><br><span class="line">2、查看当前分支：</span><br><span class="line"></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">3、切换分支：</span><br><span class="line"></span><br><span class="line">git checkout branchname</span><br><span class="line"></span><br><span class="line">4、合并分支到当前分支：</span><br><span class="line"></span><br><span class="line">git merge branchname</span><br><span class="line"></span><br><span class="line">5、删除分支：</span><br><span class="line"></span><br><span class="line">git branch -d branchname</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命令&quot; class=&quot;headerlink&quot; title=&quot;git常用命令&quot;&gt;&lt;/a&gt;git常用命令&lt;/h1&gt;&lt;p&gt;（备注：参考自廖雪峰博客，地址：&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; title=&quot;廖雪峰博客&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰博客&lt;/a&gt;   pdf版本：&lt;a href=&quot;链接:https://pan.baidu.com/s/1mwisgcbaFx35fus331YYrg&quot; title=&quot;点击下载&quot;&gt;点击下载&lt;/a&gt; 提取码：thff)&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://yangsongwei.github.io/categories/git/"/>
    
    
      <category term="git常用命令" scheme="https://yangsongwei.github.io/tags/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识补漏</title>
    <link href="https://yangsongwei.github.io/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%A1%A5%E6%BC%8F.html"/>
    <id>https://yangsongwei.github.io/java基础知识补漏.html</id>
    <published>2019-05-16T03:45:26.000Z</published>
    <updated>2019-05-16T09:36:22.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近在补充自己的java基础知识，研究生毕业可能从事开发工作，所以希望早点对这方面知识进行补充。最近在阅读《java程序员从菜鸟到笨鸟》和《疯狂Java讲义》。</p><a id="more"></a><h2 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h2><h3 id="一、根据CLASSPATH环境变量定位类"><a href="#一、根据CLASSPATH环境变量定位类" class="headerlink" title="一、根据CLASSPATH环境变量定位类"></a>一、根据CLASSPATH环境变量定位类</h3><p>​    在刚开始学习java，教程中给的配置环境变量的过程中几乎都会让配置CLASSPATH环境变量，但从来不给为什么要配置。原因是：</p><p>​    在使用“java Java类名”命令来运行java程序的时候，JRE无法搜索到java类，需要配置CLASSPATH中的（.）表示在当前路径下执行，此外，还需要JDK中lib下的dt.jart和tools.jar工具包，所以需要把这两个文件添加到CLASSPATH环境变量中。但是在java 1.5以上版本中，java就不需要配置CLASSPATH也能够运行java程序。</p><h3 id="二、java内存回收机制"><a href="#二、java内存回收机制" class="headerlink" title="二、java内存回收机制"></a>二、java内存回收机制</h3><p>​    java程序的内存分配和回收都是由JRE在后台自动进行。JRE挥挥手那些不再使用的内存。通常JRE会提供一个后台线程来检测和控制，一般都是在CPU空闲或者内存不足的时候自动进行垃圾回收。</p><p>​    垃圾回收的过程：在Java中，当没有引用变量指向原先分配给某个对象的内存时，该内存便成为垃圾，JVM的一个超级线程会自动释放该内存区。</p><p>​    因此，在编写java程序时，一个基本原则：对于不再需要的对象，不要引用它们。因为如果一直保持对对象的引用，垃圾回收机制不会回收该对象。</p><h3 id="三、文档注释"><a href="#三、文档注释" class="headerlink" title="三、文档注释"></a>三、文档注释</h3><p>​    如果在编写Java源代码时，添加了合适的文档注释，可以通过JDK提供的javadoc工具将源代码的文档注释提取成一份系统的API文档。</p><p>​    javadoc工具只处理文档原文件中在类、接口、方法、成员变量、构造器和内部类之前的注释。</p><p>注释格式是：以(/*<em>)开头，以(\</em>/)结尾。具体格式如下：</p><p>​     <img src="javadoc.png" alt></p><p>​    javadoc基本命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc 选项 Java源文件|包</span><br></pre></td></tr></table></figure><h3 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h3><p>​    1、数组的两种定义方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type[] arraytname</span><br><span class="line">type arrayname[]</span><br></pre></td></tr></table></figure><p>​    2、初始化：</p><p>​    在声明完数组织后，并没有为数组分配内存，需要进一步进行数组的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intarr;</span><br><span class="line">#静态初始化</span><br><span class="line">intarr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">#动态初始化</span><br><span class="line">intarr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>​    3、数组深度理解：</p><p>​    数组引用变量只是一个变量，数组对象上存储在堆内存区中，而数组引用变量存储在栈内存中。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    最近在补充自己的java基础知识，研究生毕业可能从事开发工作，所以希望早点对这方面知识进行补充。最近在阅读《java程序员从菜鸟到笨鸟》和《疯狂Java讲义》。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://yangsongwei.github.io/categories/java/"/>
    
    
      <category term="java基础知识" scheme="https://yangsongwei.github.io/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="补漏" scheme="https://yangsongwei.github.io/tags/%E8%A1%A5%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建过程</title>
    <link href="https://yangsongwei.github.io/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B.html"/>
    <id>https://yangsongwei.github.io/个人博客搭建过程.html</id>
    <published>2019-05-15T12:18:06.000Z</published>
    <updated>2019-05-15T12:56:28.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    最近写完论文之后，闲来无事，打算自己基于gitpages来实现一个自己的个人技术博客，忙了一天半，终于把自己的博客搭建好了，基本的样子都有了。希望能好好的写文章。因此，把整个搭建过程参考到的文章总结一下，希望后来的人能够少走弯路。</p><a id="more"></a><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="1、初步搭建"><a href="#1、初步搭建" class="headerlink" title="1、初步搭建"></a>1、初步搭建</h3><p>​    开始创建项目时，采用<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学的教程</a>，一直到修改主题都是正确的，其中如果在使用npm下载包时出现错误，可以考虑使用淘宝的包下载工具<strong>cnpm</strong>。</p><p>​    然后开始选择博客的主题，我的<a href>博客</a>使用的是NEXT主题，这个主题的开发者将整个配置过程写的很详细。非常适合初学者进行个人博客创建。</p><p>​    NEXT主题配置首页：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NEXT主题配置</a></p><p>​    基本上按照官方文档进行搭建，大部分功能都是可以实现的。</p><h3 id="2、博客功能完善："><a href="#2、博客功能完善：" class="headerlink" title="2、博客功能完善："></a>2、博客功能完善：</h3><p>​    (1)如果不想用NEXT主题，有一个博客推荐比较好的主题。<a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">博客地址</a></p><p>​    (2)添加评论功能：截止2019/5/15，本文使用的插件：<a href="https://blog.smoker.cc/web/add-comments-livere-for-hexo-theme-next.html" target="_blank" rel="noopener">来必力</a>,一共尝试了不同的评论系统：</p><p>​        -畅言：注册过程中需要使用网站的ICP备案，特别麻烦，所以弃用。</p><p>​        -DISQUS:使用还可以，就是需要外网访问，墙内用户访问不到评论，略坑。</p><p>​    (3)网站seo：为了能够让浏览器爬虫爬取到你的站点，需要进行seo优化，<a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">优化教程</a>.建议不要进行百度            的优化，很坑。</p><p>​    (4)引言</p><p>​    最近写完论文之后，闲来无事，打算自己基于gitpages来实现一个自己的个人技术博客，忙了一天半，终于把自己的博客搭建好了，基本的样子都有了。希望能好好的写文章。因此，把整个搭建过程参考到的文章总结一下，希望后来的人能够少走弯路。</p><!--more--><h2 id="搭建过程-1"><a href="#搭建过程-1" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="1、初步搭建-1"><a href="#1、初步搭建-1" class="headerlink" title="1、初步搭建"></a>1、初步搭建</h3><p>​    开始创建项目时，采用<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学的教程</a>，一直到修改主题都是正确的，其中如果在使用npm下载包时出现错误，可以考虑使用淘宝的包下载工具<strong>cnpm</strong>。</p><p>​    然后开始选择博客的主题，我的<a href>博客</a>使用的是NEXT主题，这个主题的开发者将整个配置过程写的很详细。非常适合初学者进行个人博客创建。</p><p>​    NEXT主题配置首页：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NEXT主题配置</a></p><p>​    基本上按照官方文档进行搭建，大部分功能都是可以实现的。</p><h3 id="2、博客功能完善：-1"><a href="#2、博客功能完善：-1" class="headerlink" title="2、博客功能完善："></a>2、博客功能完善：</h3><p>​    (1)如果不想用NEXT主题，有一个博客推荐比较好的主题。<a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">博客地址</a></p><p>​    (2)添加评论功能：截止2019/5/15，本文使用的插件：<a href="https://blog.smoker.cc/web/add-comments-livere-for-hexo-theme-next.html" target="_blank" rel="noopener">来必力</a>,一共尝试了不同的评论系统：</p><p>​        -畅言：注册过程中需要使用网站的ICP备案，特别麻烦，所以弃用。</p><p>​        -DISQUS:使用还可以，就是需要外网访问，墙内用户访问不到评论，略坑。</p><p>​    (3)网站seo：为了能够让浏览器爬虫爬取到你的站点，需要进行seo优化，<a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">优化教程</a>.建议不要进行百度            的优化，很坑。</p><p>​    (4)能够配置功能很多的网页：<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">Hexo-NexT配置超炫网页效果</a>，其中大部分是能够用的，有的还没测试，        希望有时间再添加。</p><p>​    (5)hexo博客官网：<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">网址</a></p><p>​    (6)对上线博客的样式进行修改：<a href="https://zouzls.github.io/2017/03/17/Next%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF%E4%B8%AA%E6%80%A7%E5%8C%96DIY/" target="_blank" rel="noopener">Next主题背景个性化DIY</a></p><p>​    </p><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;​    最近写完论文之后，闲来无事，打算自己基于gitpages来实现一个自己的个人技术博客，忙了一天半，终于把自己的博客搭建好了，基本的样子都有了。希望能好好的写文章。因此，把整个搭建过程参考到的文章总结一下，希望后来的人能够少走弯路。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://yangsongwei.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://yangsongwei.github.io/tags/hexo/"/>
    
      <category term="next" scheme="https://yangsongwei.github.io/tags/next/"/>
    
  </entry>
  
</feed>
