<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[未选择的路]]></title>
    <url>%2F%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF.html</url>
    <content type="text"><![CDATA[未选择的路​ 弗罗斯特（美） 黄色的树林里分出两条路 可惜我不能同时去涉足 我在那路口久久伫立 我向着一条路极目望去 直到它消失在丛林深处 但我选了另外一条路 它荒草萋萋，十分幽寂 显得更诱人，更美丽 虽然在这条小路上 很少留下旅人的足迹 那天清晨落叶满地 两条路都未经脚印污染 啊，留下一条路等改日再见 但我知道路径延绵无尽头 恐怕我难以再回返 也许多少年后在某个地方 我将轻声叹息将往事回顾 一条树林里分出两条路—— 而我选择了人际更少的一条 从此决定了我一生的道路]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端之css基础知识]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E4%B9%8Bcss%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</url>
    <content type="text"><![CDATA[简介​ 前端中css基础知识总结。参考书籍《HTML&amp;CSS设计与构建网站》 css原理​ 理解css的关键在于要看到网页中的任何元素周围都有一个看不见的盒子，css允许你创建规则，来操纵每个盒子以及盒子中的内容的显示方式。 ​ css采用将样式规则与html元素相关联的方式来操纵元素。一条css规则包含两个部分：一个选择器和一条声明。 ​ 123p&#123; font-family: Arial;&#125; css基础知识一、使用css：1、外部引入1&lt;link rel="stylesheet" type="text/css" href="css路径"&gt; ​ 若需要引入多个css文件，则需要使用多个link标签进行引入。 2、内部引入123&lt;style type="test/css"&gt; &lt;!--css code--&gt;&lt;/style&gt; 二、css颜色​ 1、css3透明度： ​ 1234567p&#123; opacity:0~1;&#125;p&#123; rgba(,,,0~1);&#125; 三、文本1、字体术语​ (1)衬线字体：在主要的笔画的末端有一些额外的装饰，这些装饰被称为衬线。通常用于长篇文本。 ​ (2)无衬线字体：用于文本非常小。 ​ (3)等宽字体：每个字母的宽度都相同。 2、字体选用​ 1234//字体样式font-family: ;//字体大小font-size: ; 3、字体格式12//文字对齐方式text-align:left/center/right/justify(两端对齐) 4、链接样式：1234567:link&#123; //为尚未访问过的链接设置样式&#125;:visited&#123; //为已经访问过的链接设置样式&#125; 1234567891011：hover&#123; //鼠标悬停在某个地方时的显示样式&#125;:active&#123; //当动作生效时，产生的效果&#125;:focus&#123; //在元素拥有焦点时产生效果&#125; 四、盒子模型一、盒子的大小​ 1234567891011121314//宽度width: ;//高度height: ;//盒子的最大宽度max-width: ;//盒子的最小宽度min-width: ;//最大高度max-height: ;//最小高度min-height: ; 二、内容溢出​ 1overflow:hidden/scroll 三、边框、外边距、内边距12]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode之remove element]]></title>
    <url>%2Fleetcode%E4%B9%8Bremove-element.html</url>
    <content type="text"><![CDATA[删除元素（remove element）题意​ 给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 思路​]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML总结]]></title>
    <url>%2FHTML%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[html标签总结 标签名 用法 属性 效果 html 网页总标签 br 换行 hr 画出水平分割线 em 起强调作用 blockquote 表明内容是引用 strong 内容显示为粗体 ol 创建有序列表 ul 创建无序列表 li 用于创建列表中的具体的项 a href mailto:email target:_blank 网页链接到别的界面，href表示链接的网址。 img src=”” alt=”” 当图片无法显示时显示文字 title=”” 鼠标点击图片时显示 插入图片 figcaption figure hhtml5中可以对图形进行描述 表格1、实例： 1234567891011121314&lt;table&gt; &lt;tr&gt; &lt;th&gt;1&lt;/th&gt; &lt;th&gt;2&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 40 &lt;/td&gt; &lt;td&gt;30 &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 2、属性标签： ​ 属性 效果 colspan 跨多少列 rowspan 跨多少行 表单1、实例： ​ 1234&lt;form action="sub.php" method="get/post"&gt; &lt;!--单行文本框--&gt; username:&lt;input type="text" name="username" length="20"&gt;&lt;br/&gt;&lt;/form&gt; 2、组合表单元素： ​ 1234567&lt;fieldset&gt; &lt;legend&gt;个人信息&lt;/legend&gt; &lt;label&gt;姓名&lt;/label&gt;&lt;input type="text" name="name"&gt;&lt;br&gt; &lt;label&gt;年龄&lt;/label&gt;&lt;input type="text" name="age"&gt;&lt;br&gt; &lt;label&gt;职务&lt;/label&gt;&lt;input type="text" name="work"&gt;&lt;br&gt; &lt;input type="submit" value="提交"&gt;&amp;nsbn&lt;input type="reset" value="清空"&gt;&lt;/fieldset&gt; 3、html5验证表单： 12345&lt;form&gt; &lt;label&gt;姓名&lt;/label&gt;&lt;input type="text" name="name" required="required"&gt;&lt;br&gt; &lt;label&gt;年龄&lt;/label&gt;&lt;input type="text" name="age" required="required"&gt;&lt;br&gt; &lt;input type="submit" name="提交"&gt;&lt;/form&gt; ​ 目前只有chrome和opera支持该特性。需要添加required属性。 4、html5日期控件： ​ 12&lt;label&gt;生日&lt;/label&gt;&lt;input type="date"&gt; &lt;!--type属性值为date表示插入一个日期控件--&gt; 5、html5邮件、url输入控件、搜索控件 ​ 123&lt;label&gt;电子邮件&lt;/label&gt;&lt;/label&gt;&lt;input type="email"&gt;&lt;label&gt;url&lt;/label&gt;&lt;input type="url"&gt;&lt;label&gt;搜索&lt;/label&gt;&lt;input type="search" name="search" placeholder="请输入搜索内容"&gt; 其他标记文档类型1&lt;!DOCTYPE html&gt; 注释1&lt;!--注释--&gt; 块级元素​ 有些元素在浏览器中显示的过程中总是要另起一行，称为块级元素。如div。 内联元素​ 有些元素在浏览器中显示过程中总是和相邻元素处在同一行内，称为内联元素。如span。 内联框架​ 在网页中开启另一个小窗口，可以看到另一个网页。常用在网页中显示地图。 1&lt;iframe width="450" height="350" src="http://maps.google.co.uk/maps?q=moma+new_yourk&amp;amp;output=embed"&gt;&lt;/iframe&gt; 添加视频信息​ 1、视频 ​ 属性： ​ 属性名称 属性值 属性解释 src 视频路径 poster 图片路径 用于在未播放视频时在视频中显示的图片 width,height 指定播放视频的宽度和高度 controls 如果使用该属性，表明需要提供浏览器默认的播放器 autoplay 表明浏览器会自动播放视频 loop 表明在播放完视频之后会重复播放视频 preload none/auto/metadata 在用户不点击播放时不加载视频/在加载页面时加载视频/只收集少量的视频信息 123&lt;video src="video/puppy.webm" poster="images/puppy.jpg" controls autoplay &gt; &lt;/video&gt; 若是有多个视频，可以使用标签进行操作，代替vedio标签中的src属性。在vedio标签中包含多个视频。 添加音频信息​ 1&lt;audio&gt;&lt;/audio&gt; 属性与视频属性相同。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python之进程和线程]]></title>
    <url>%2Fpython%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.html</url>
    <content type="text"><![CDATA[python实现进程和线程 1、多进程实现代码： ​ 12345678910111213141516171819202122232425262728from multiprocessing import Processfrom os import getpidfrom random import randintfrom time import time, sleepdef download_task(filename): print('启动下载进程，进程号[%d].' % getpid()) print('开始下载%s...' % filename) time_to_download = randint(5, 10) sleep(time_to_download) print('%s下载完成! 耗费了%d秒' % (filename, time_to_download))def main(): start = time() p1 = Process(target=download_task, args=('Python从入门到住院.pdf', )) p1.start() p2 = Process(target=download_task, args=('Peking Hot.avi', )) p2.start() p1.join() p2.join() end = time() print('总共耗费了%.2f秒.' % (end - start))if __name__ == '__main__': main() 2、多线程实现代码： ​ （1）通过创建Thread类进行创建： ​ 1234567891011121314151617181920212223from threading import Threadfrom random import randintfrom time import time,sleepdef download(filename): print('开始下载%s...' % filename) time_to_download = randint(5, 10) sleep(time_to_download) print('%s下载完成! 耗费了%d秒' % (filename, time_to_download))def main(): start=time() thread1=Thread(target=download, args=('Python从入门到住院.pdf',)) thread2=Thread(target=download,args=('Peking Hot.avi',)) thread1.start() thread2.start() thread1.join() thread2.join() end=time() print('总共消耗了%.3f秒'%(end-start))if __name__=='__main__': main() (2)通过继承Thread类： ​ 1234567891011121314151617181920212223242526272829303132from random import randintfrom threading import Threadfrom time import time, sleepclass DownloadTask(Thread): def __init__(self, filename): super().__init__() self._filename = filename def run(self): print('开始下载%s...' % self._filename) time_to_download = randint(5, 10) sleep(time_to_download) print('%s下载完成! 耗费了%d秒' % (self._filename, time_to_download))def main(): start = time() t1 = DownloadTask('Python从入门到住院.pdf') t1.start() t2 = DownloadTask('Peking Hot.avi') t2.start() t1.join() t2.join() end = time() print('总共耗费了%.2f秒.' % (end - start))if __name__ == '__main__': main()]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python之文件和异常]]></title>
    <url>%2Fpython%E4%B9%8B%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8.html</url>
    <content type="text"><![CDATA[python文件和异常​ python中文件和异常的基础知识。 文件操作​ 1、使用python内置函数open()函数。 ​ 2、文件操作模式： ​ 操作模式 具体含义 ‘r’ 只读（默认模式） ‘w’ 写入（会先截断之前的内容） ‘x’ 写入，如果文件已经存在会产生异常 ‘a’ 追加，将内容写入到已有文件的末尾 ‘b’ 二进制模式 ‘t’ 文本模式 ‘+’ 更新（既可以都又可以写） 异常1、模式： 12345try:except Exception:finally:]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>文件</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经济学思维方式（二）]]></title>
    <url>%2F%E7%BB%8F%E6%B5%8E%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
    <content type="text"><![CDATA[一、导言​ 经济学思维方式中第二章讲述的基本的经济学概念总结。 二、比较优势法则三、中间人​]]></content>
      <tags>
        <tag>经济学思维方式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复杂网络理论及其应用（二）]]></title>
    <url>%2F%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%90%86%E8%AE%BA%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
    <content type="text"><![CDATA[第二章 网络拓扑结构基本模型及其性质引言​ 本章总结积累基本的模型，包括规则网络、随机图、小世界网络、无标度网络、等级网络和局域世界演化网络模型。 规则网络​ 1、规则网络模型：最近邻网络(只与周围的邻居结点相邻) ​ 2、 随机图(完全随机网络)​ 1、ER随机图：网络中任意两个点之间存在联系的概率是p。 ​ 平均度：=p(N-1) ​ 小世界网络模型概念​ 是现实中的网络的表现，介于完全规则网络和随机网络之间。 ​ 即具有较短的平均路径长度又具有较高的聚类系数的网络称为小世界网络。 统计性质​]]></content>
      <categories>
        <category>复杂网络理论</category>
      </categories>
      <tags>
        <tag>网络拓扑基本模型</tag>
        <tag>网络性质</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java基础之JAR文件]]></title>
    <url>%2Fjava%E5%9F%BA%E7%A1%80%E4%B9%8BJAR%E6%96%87%E4%BB%B6.html</url>
    <content type="text"><![CDATA[java中JAR文件的使用JAR文件​ 全程Java Archive File，及java档案文件。 JAR命令详解​ 1、创建JAR文件：jar cf test.jar test 不显示压缩过程。 ​ 2、创建jar文件，并显示压缩过程：jar cvf test.jar test ​ 3、不使用清单文件： jar cvfM test.jar test ​ 4、查看JAR包的内容：jar tf test.jar ​ 5、解压缩文件：jar xf test.jar ​ 6、带提示信息解压缩：jar xf test.jar 如何制作可执行的JAR包​ jar cvfe test.jar test.Test test]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>JAR文件</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js基础语法]]></title>
    <url>%2Fjs%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
    <content type="text"><![CDATA[基础知识​ 1、js中变量名区分大小写。 ​ 2、如果变量只声明不赋值，该变量的值是undefined。 ​ 3、变量提升：js引擎在执行代码时，会将所有声明变量的语句提升到代码的头部。所以下面的代码不会报错。 ​ 12console.log(b);var b="yangsongwei"; ​ 两种形式：// 和/ / 语句​ 1、条件语句 ​ 1234567if()&#123; &#125;else if&#123; &#125;else&#123; &#125; ​ 2、switch结构 ​ 12345678910switch(fruit)&#123; case "banana": //.... break; case "apple": //.... break; default: //....&#125; ​ 3、三目运算符 ​ (条件) ？ 表达式1：表达式2 ​ 4、循环语句 ​ (1)while循环 123while(条件)&#123; 语句;&#125; 数据类型​ 1、typeof运算符：返回一个数据的类型信息。 ​ 2、与数值相关的全局方法： ​ (1)parseInt() 将字符串转化为整数。 字符串​ 1、字符串默认只能写在同一行中，多行会报错，但是可以使用反斜杠来表示。 1234'a\b\c';"abc" ​ 2、可以使用运算符(+)连接多个单行字符串。 ​ 3、字符串可以视为字符数组，可以通过下标的方式进行访问。 ​ 4、.length返回的是字符串的长度。 对象​ 1、对象在js中就是一组键值对。 ​ 123var obj=&#123; 'foo':'Hello',&#125; ​ 2、如果键名是数值，会自动被转换为字符串。 ​ 3、对象的每一个键名称为属性，属性可以为任何一个类型，若键值的属性的值是函数的话，称为对象的方法。 12345var test=&#123; p:function(c)&#123; return 2*c; &#125;&#125;; ​ 4、在处理对象时，如果有括号，解析为对象，没有括号的话，解析为字符串。 ​ 5、对属性进行读取，采用”.”或下标。 ​ 123456789101112var test=&#123; 1:"yang", 2:"song", 3:"wei", t1:function(x)&#123; return 2*x; &#125;&#125;;//访问test.t1(2)test['t1'] ​ 6、属性的查看： ​ Object.keys(obj) ​ 7、属性删除： ​ delete obj.p ​ 8、属性是否存在： ​ ‘p’ in obj 缺点：不能判断属性是否是自己的还是集成的。 ​ obj.hasOwnProperty(p) 用于判断属性是都是对象自身所有的属性。 ​ 9、属性的遍历： ​ for … in …循环 1234567var obj=&#123; a:1,b:2,c:3&#125;;for(var i in obj)&#123; console.log("键名：",i); console.log("键值",obj[i]);&#125; ​ 10、with语句： ​ 用于操纵同一个对象的多个属性。 123with(对象)&#123; 语句;&#125; 函数​ 1、函数声明的三种方式： 1234567891011121314151617//第一种function print(S)&#123; console.log(S);&#125;//第二种var print=function(S)&#123; console.log(S);&#125;//第三种var print=new Function( 'x', 'y', 'return x+y')//第三种方式中只有倒数第一个被称作函数体，前面的所有的都是变量。 ​ ​ 2、函数名提升：和变量名提升相同，可以把一个函数声明提升到代码的头部。 ​]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复杂网络理论及其应用之初入]]></title>
    <url>%2F%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%90%86%E8%AE%BA%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%9D%E5%85%A5.html</url>
    <content type="text"><![CDATA[引论复杂网络研究简史七桥问题​ 小世界实验​ 即美国哈佛大学社会心理学家Stanley Milgram通过一些社会后给出的推断：地球上任意两个人之间的平均距离是6—六度分割理论。 弱连接的强度 基本概念​ 1、网络的直径(diameter):网络中任意节点之间的距离的最大值成为网络的直径，记为D。 ​ D=\max_{i,j}d_{ij}​ 2、网络的平均长度L定义为任意两个节点之间的距离的平均值，即： ​ L=\frac1{\frac12N(N+1)}\sum_{i{\ge}j}d_{ij}​ 3、聚类系数：网络中的一个节点 ​ 4、度与度的分布： ​ 出度： ​ 入度： ​ 网络的平均度： ​ 5、幂律分布/无标度分布： ​ 在一个分布为具有幂率形式的大规模无标度网络中，绝大多数节点的度的相对较低，但存在少量的节点具有很高的度。]]></content>
      <categories>
        <category>复杂网络理论及其应用</category>
      </categories>
      <tags>
        <tag>复杂网络</tag>
        <tag>初入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java web入门（一） jsp学习]]></title>
    <url>%2Fjava-web%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89-jsp%E5%AD%A6%E4%B9%A0.html</url>
    <content type="text"><![CDATA[前言jsp内容学习 jsp页面中的三种注释​ 123第一种：&lt;!--&lt;%=expression%&gt;--&gt;第二种：&lt;%--注释内容--%&gt;第三种：&lt;%//%&gt; &lt;% /* */%&gt; jsp指令]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jsp</tag>
        <tag>java web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习实战之KNN算法]]></title>
    <url>%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%E4%B9%8BKNN%E7%AE%97%E6%B3%95.html</url>
    <content type="text"><![CDATA[导言​ 最近在学习《机器学习实战》这本书，希望把学到的机器学习知识能够应用下来。所有的代码都在我的github的mllearning仓库中。本章记录学习KNN算法以及应用。 [TOC] 数学原理（主要参考）​ KNN近邻算法K-近邻算法概述工作原理​ 采用测量不同特征值之间的距离进行分类。工作原理：存在一个样本数据集合，并且样本集中每个数据都存在标签，即知道样本集中每一数据与所属类别的对应关系。输入一个没有标签的数据，计算新数据的每一个特征和样本集中数据对应特征，然后根据算法提取出样本集中特征最相似的数据的分类标签；通常，我们只选择样本集中前K个醉相思的数据，即为KNN中的K值。通常K为不超过20的整数。 具体例子​ 对电影数据进行分类。具体数据格式如表1.1所示： 每部电影中的打斗镜头数、接吻镜头数以及电影类型评估 电影名称 打斗镜头 接吻镜头 电影类型 California Man 3 104 爱情片 爱情片 He’s Not Really into Dudes 2 100 爱情片 Beautiful Woman 1 81 Kevin Longblade 101 10 动作片 Robo Slayer 3000 99 5 动作片 表1.1 我们选取每部电影中的打斗镜头和接吻镜头作为特征。通过计算未知电影与样本集中其他电影的距离。如图1.1 ​ 图1.1 得到所有的距离，按照递增排序，可以找到k个距离相近的电影。假设距离是3，我们得到距离最小的三部电影是He’s Not Really into Dudes、Beautiful Woman和California Man。三部电影全是爱情片，因此我们判断未知电影是爱情片。 代码实现​]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习实战</tag>
        <tag>KNN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令手册]]></title>
    <url>%2Fgit%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C.html</url>
    <content type="text"><![CDATA[git常用命令（备注：参考自廖雪峰博客，地址：廖雪峰博客 pdf版本：点击下载 提取码：thff) 一、本地操作1、初始化仓库： 1git init 2、将文件添加进仓库缓冲区： 1git add filename 3、将文件添加进仓库： 1git commit -m &quot;message&quot; 4、查看仓库的状态： 1git status 5、查看仓库中文件具体修改的信息： git diff filename 6、仓库版本回退： git reset --hard HEAD~n（HEAD 是当前版本，HEAD^是前一个版本，n代表前面第n格版本） 7、撤销修改： git checkout -- filename 8、删除版本库中的文件： git rm filename 二、远程操作：（前提是你要将你的工作目录改为你的本地仓库） 1、本地仓库关联远程仓库： 1$ git remote add origin git@github.com:michaelliao/learngit.git 2、将本地仓库的内容推送到远程仓库： git push -u origin master（第一次关联时需要加上-u） 3、克隆远程仓库到本地仓库： 1$ git clone git@github.com:michaelliao/gitskills.git 三、分支管理123456789101112131415161718192021222324251、创建一个新的分支： git checkout -b dev（创建分支并且切换到dev分支） 相当于： git branch dev（创建dev分支） git checkout dev(切换到dev 分支)2、查看当前分支： git branch3、切换分支： git checkout branchname4、合并分支到当前分支： git merge branchname5、删除分支： git branch -d branchname]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java基础知识补漏]]></title>
    <url>%2Fjava%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%A1%A5%E6%BC%8F.html</url>
    <content type="text"><![CDATA[前言​ 最近在补充自己的java基础知识，研究生毕业可能从事开发工作，所以希望早点对这方面知识进行补充。最近在阅读《java程序员从菜鸟到笨鸟》和《疯狂Java讲义》。 知识总结一、根据CLASSPATH环境变量定位类​ 在刚开始学习java，教程中给的配置环境变量的过程中几乎都会让配置CLASSPATH环境变量，但从来不给为什么要配置。原因是： ​ 在使用“java Java类名”命令来运行java程序的时候，JRE无法搜索到java类，需要配置CLASSPATH中的（.）表示在当前路径下执行，此外，还需要JDK中lib下的dt.jart和tools.jar工具包，所以需要把这两个文件添加到CLASSPATH环境变量中。但是在java 1.5以上版本中，java就不需要配置CLASSPATH也能够运行java程序。 二、java内存回收机制​ java程序的内存分配和回收都是由JRE在后台自动进行。JRE挥挥手那些不再使用的内存。通常JRE会提供一个后台线程来检测和控制，一般都是在CPU空闲或者内存不足的时候自动进行垃圾回收。 ​ 垃圾回收的过程：在Java中，当没有引用变量指向原先分配给某个对象的内存时，该内存便成为垃圾，JVM的一个超级线程会自动释放该内存区。 ​ 因此，在编写java程序时，一个基本原则：对于不再需要的对象，不要引用它们。因为如果一直保持对对象的引用，垃圾回收机制不会回收该对象。 三、文档注释​ 如果在编写Java源代码时，添加了合适的文档注释，可以通过JDK提供的javadoc工具将源代码的文档注释提取成一份系统的API文档。 ​ javadoc工具只处理文档原文件中在类、接口、方法、成员变量、构造器和内部类之前的注释。 注释格式是：以(/*)开头，以(\/)结尾。具体格式如下： ​ ​ javadoc基本命令： 1javadoc 选项 Java源文件|包 四、数组​ 1、数组的两种定义方式： 12type[] arraytnametype arrayname[] ​ 2、初始化： ​ 在声明完数组织后，并没有为数组分配内存，需要进一步进行数组的初始化。 12345int[] intarr;#静态初始化intarr=new int[]&#123;5,6,7,8&#125;#动态初始化intarr=new int[10] ​ 3、数组深度理解： ​ 数组引用变量只是一个变量，数组对象上存储在堆内存区中，而数组引用变量存储在栈内存中。 五、面向对象1、类的定义：12345[修饰符] class [类型]&#123; 0到多个构造器； 0到多个属性值； 0到多个方法；&#125; 2、类的方法：​ (1)方法重载： ​ 方法重载要求：”两同一不同”—同一个类中的方法名相同，参数列表不同。返回值类型、修饰符与重载无关。 3、成员变量：​ (1)成员变量和局部变量： ​ ​ (2)注意： ​ 在访问类变量的时候，尽量使用类来进行访问而不是使用对象进行访问,容易造成歧义。 ​ (3)隐藏和封装： ​ ​ 4、package、import和import static：​ 包：引入包机制，提供了类的多层命名空间，用于解决类的命名冲突、类文件管理等问题。 123456789101112131415161718package packageName;//创建程序ackage monty;public class Dog&#123; public static void main(String[] args)&#123; System.out.println("Hello World!"); &#125;&#125;//编译命令javac -d [目标路径] Dog//运行命令java monty.Dog//在其他文件中导入包import 包+类名 5、深入构造器​ （1）如何在一个构造器中调用里一个构造器 ​ 1234567891011121314151617181920public class Apple&#123; public String name; public String color; public double weight; public Apple()&#123; &#125; public Apple(String name,String color)&#123; this.name=name; this.color=color &#125; public Apple(String name,String color,double weight)&#123; //通过this调用另一个构造器 this(name,color); this.weight=weight; &#125;&#125; 6、继承​ JAVA继承的特点是单继承，每一个子类只能有一个直接父类，使用关键字extends。 ​ （1）方法重写 ​ 遵循”两同两小一大”：方法名相同、形参列表相同、子类方法返回值类型比父类方法返回值类型更小或者相等。 ​ (2)在子类中使用父类的方法：super关键字。 ​ (3)instanceof 运算符 ：判断一个对象是否是一个类。 ​ ​]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
        <tag>补漏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建过程]]></title>
    <url>%2F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B.html</url>
    <content type="text"><![CDATA[引言​ 最近写完论文之后，闲来无事，打算自己基于gitpages来实现一个自己的个人技术博客，忙了一天半，终于把自己的博客搭建好了，基本的样子都有了。希望能好好的写文章。因此，把整个搭建过程参考到的文章总结一下，希望后来的人能够少走弯路。 搭建过程1、初步搭建​ 开始创建项目时，采用小茗同学的教程，一直到修改主题都是正确的，其中如果在使用npm下载包时出现错误，可以考虑使用淘宝的包下载工具cnpm。 ​ 然后开始选择博客的主题，我的博客使用的是NEXT主题，这个主题的开发者将整个配置过程写的很详细。非常适合初学者进行个人博客创建。 ​ NEXT主题配置首页：NEXT主题配置 ​ 基本上按照官方文档进行搭建，大部分功能都是可以实现的。 2、博客功能完善：​ (1)如果不想用NEXT主题，有一个博客推荐比较好的主题。博客地址 ​ (2)添加评论功能：截止2019/5/15，本文使用的插件：来必力,一共尝试了不同的评论系统： ​ -畅言：注册过程中需要使用网站的ICP备案，特别麻烦，所以弃用。 ​ -DISQUS:使用还可以，就是需要外网访问，墙内用户访问不到评论，略坑。 ​ (3)网站seo：为了能够让浏览器爬虫爬取到你的站点，需要进行seo优化，优化教程.建议不要进行百度 的优化，很坑。 ​ (4)引言 ​ 最近写完论文之后，闲来无事，打算自己基于gitpages来实现一个自己的个人技术博客，忙了一天半，终于把自己的博客搭建好了，基本的样子都有了。希望能好好的写文章。因此，把整个搭建过程参考到的文章总结一下，希望后来的人能够少走弯路。 搭建过程1、初步搭建​ 开始创建项目时，采用小茗同学的教程，一直到修改主题都是正确的，其中如果在使用npm下载包时出现错误，可以考虑使用淘宝的包下载工具cnpm。 ​ 然后开始选择博客的主题，我的博客使用的是NEXT主题，这个主题的开发者将整个配置过程写的很详细。非常适合初学者进行个人博客创建。 ​ NEXT主题配置首页：NEXT主题配置 ​ 基本上按照官方文档进行搭建，大部分功能都是可以实现的。 2、博客功能完善：​ (1)如果不想用NEXT主题，有一个博客推荐比较好的主题。博客地址 ​ (2)添加评论功能：截止2019/5/15，本文使用的插件：来必力,一共尝试了不同的评论系统： ​ -畅言：注册过程中需要使用网站的ICP备案，特别麻烦，所以弃用。 ​ -DISQUS:使用还可以，就是需要外网访问，墙内用户访问不到评论，略坑。 ​ (3)网站seo：为了能够让浏览器爬虫爬取到你的站点，需要进行seo优化，优化教程.建议不要进行百度 的优化，很坑。 ​ (4)能够配置功能很多的网页：Hexo-NexT配置超炫网页效果，其中大部分是能够用的，有的还没测试， 希望有时间再添加。 ​ (5)hexo博客官网：网址 ​ (6)对上线博客的样式进行修改：Next主题背景个性化DIY ​ ​]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>
